---
- name: Install Vector
  hosts: vector
  gather_facts: false

  tasks:
    - name: Download and install Vector
      tags: vector
      block:
        - name: Vector. Create work directory
          ansible.builtin.file:
            path: "{{ vector_workdir }}"
            state: directory
            mode: "0755"

        - name: Vector. Download archive
          ansible.builtin.get_url:
            url: "https://packages.timber.io/vector/{{ vector_version }}/vector-{{ vector_version }}-{{ vector_os_arh }}-unknown-linux-gnu.tar.gz"
            dest: "{{ vector_workdir }}/vector-{{ vector_version }}-{{ vector_os_arh }}-unknown-linux-gnu.tar.gz"
            mode: "0644"

        - name: Vector. Unzip archive
          ansible.builtin.unarchive:
            remote_src: true
            src: "{{ vector_workdir }}/vector-{{ vector_version }}-{{ vector_os_arh }}-unknown-linux-gnu.tar.gz"
            dest: "{{ vector_workdir }}"

        - name: Vector. Check if binary exists
          ansible.builtin.stat:
            path: "/usr/bin/vector"
          register: vector_binary

        - name: Vector. Install vector binary file
          become: true
          ansible.builtin.copy:
            remote_src: true
            src: "{{ vector_workdir }}/vector-{{ vector_os_arh }}-unknown-linux-gnu/bin/vector"
            dest: "/usr/bin/"
            mode: "0755"
            owner: root
            group: root
          when: not vector_binary.stat.exists
          changed_when: false

        - name: Vector. Check installation
          ansible.builtin.command: "vector --version"
          register: var_vector
          failed_when: var_vector.rc != 0
          changed_when: false

        - name: Vector. Create etc directory
          become: true
          ansible.builtin.file:
            path: "/etc/vector"
            state: directory
            mode: "0755"

        - name: Vector. Create config vector.yaml
          become: true
          ansible.builtin.template:
            src: "template/vector/vector.yaml.j2"
            dest: "/etc/vector/vector.yaml"
            mode: "0644"
            owner: root
            group: root

        - name: Vector. Create user
          become: true
          ansible.builtin.user:
            create_home: false
            name: "{{ vector_os_user }}"

        - name: Vector. Create data_dir
          become: true
          ansible.builtin.file:
            path: "{{ vector_data_dir }}"
            state: directory
            mode: "0755"
            owner: "{{ vector_os_user }}"
            group: "{{ vector_os_group }}"

        - name: Vector. Check if service file exists
          ansible.builtin.stat:
            path: "/lib/systemd/system/vector.service"
          register: vector_service

        - name: Vector. Create daemon
          become: true
          ansible.builtin.copy:
            remote_src: true
            src: "{{ vector_workdir }}/vector-{{ vector_os_arh }}-unknown-linux-gnu/etc/systemd/vector.service"
            dest: "/lib/systemd/system/"
            mode: "0644"
            owner: "{{ vector_os_user }}"
            group: "{{ vector_os_group }}"
          when: not vector_service.stat.exists
          changed_when: false
          notify: Start Vector service

        - name: Vector. Modify service file ExecStart
          become: true
          ansible.builtin.replace:
            backup: true
            path: "/lib/systemd/system/vector.service"
            regexp: "^ExecStartPre=/usr/bin/vector validate$"
            replace: "ExecStartPre=/usr/bin/vector validate --config-yaml /etc/vector/vector.yaml"
          notify: Start Vector service

        - name: Vector. Modify service file ExecStartPre
          become: true
          ansible.builtin.replace:
            backup: true
            path: "/lib/systemd/system/vector.service"
            regexp: "^ExecStart=/usr/bin/vector$"
            replace: "ExecStart=/usr/bin/vector --config-yaml /etc/vector/vector.yaml"
          notify: Start Vector service
